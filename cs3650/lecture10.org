#+TITLE: CS3650: Lecture 10
Today: processes - fork() and exec()
* Open file:
#+BEGIN_SRC C
int main(int _ac, char* _av[]) {
    FILE* thing1 = fopen("/tmp/thing1/txt", "w"); // open file and write to it
    fprintf(thing1, "Hello, thing1\n");
    fclose(thing1);

    char temp[80]; // open again and read from it
    FILE* input = fopen("/tmp/thing1.txt", "r");
    fgets(temp, 80, input1);
    fclose(input1);

    fprintf(stdout, "%s", temp);

    return 0;
}
#+END_SRC

* Same thing with syscalls:
#+BEGIN_SRC C
int main(int _ac, char* _av[]) {
    int thing1 = open("/tmp/thing1.txt", O_CREAT | O_TRUNC | O_WRONLY);
    char* msg = "Hello, Thing1\n";
    write(thing1, msg, strlen(msg));
    close(thing1);

    char temp[80];
    int input1 = open("/tmp/thing1.txt", O_RDONLY);
    int len = read(input1, temp, 80);
    // number means reading into an 80 byte buffer, read as many bytes as possible
    close(input1);
    temp[len] = 0;

    write(1, temp, strlen(temp));
}
#+END_SRC

* Combining flags with bitwise OR:
#+BEGIN_SRC C
const int FLAG1 = 1;
const int FLAG2 = 2;
const int FLAG3 = 4;
const int FLAG4 = 8;
our_syscall(FLAG2 | FLAG4);
// FLAG2 | FLAG4 is bitwise or, 8 + 2 = 10
#+END_SRC

* Process - instance of a currently running program
- & :: runs process in background
- ps :: lists processes
- pstree :: shows process tree

* fork - duplicates current process with new ID
#+BEGIN_SRC C
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>

int
main(int _ac, char* _av[])
{
    int opid = getpid(); // get id of this process
    int opar = getppid(); // get id of parent process
    int cpid;

    printf("Hi, I'm %d, child of %d\n", opid, opar);

    // fork creates a new process by duplicating the process that called it
    // everything is copied over with new process id

    // the return value of fork is 0 in the parent process,
    // and the new process id in the new process
    // value that was assigned is returned to if statement
    if ((cpid = fork())) {
        int pid1 = getpid();
        int par1 = getppid();
        printf("Hallo, I'm %d, child of %d\n", pid1, par1);

        int st;
        wait(&st); // waits until child process has terminated
        printf("I found the number %d\n", st);
    }
    else {
        int pid2 = getpid();
        int par2 = getppid();
        printf("Ahoy! I'm %d, child of %d\n", pid2, par2);
    }

    return 0;
}
#+END_SRC

* execlp
- exec syscall wrappers
- all start with exec
- then argv format
  - "l" means "list" means the args are directly in the call
  - "v" means "vector" means the args are in a spearate array
  - "p" means we use $PATH to find executables
- call once and it never returns unless there is an error
#+BEGIN_SRC C
execlp("echo", "echo", "In", "subprocess", NULL);
#+END_SRC

* pipe
- close whichever end of pipe is not being used
#+BEGIN_SRC C
void
check_rv(int rv)
{
    if (rv == -1) { // rv = return value
        perror("fail"); // print error message
        exit(1);
    }
}

int
main(int _ac, char* _av[])
{
    int rv;
    char msg[] = "Hello, pipe.\n";

    int pipe_fds[2];
    // pipe syscall takes array of 2 integers that represent file descriptors
    // used to communicate between parent and child processes
    rv = pipe(pipe_fds);
    check_rv(rv);

    int p_read  = pipe_fds[0];
    int p_write = pipe_fds[1];

    rv = write(p_write, msg, strlen(msg));
    check_rv(rv);

    char temp[100];
    rv = read(p_read, temp, 100); //blocks until there is something to read
    check_rv(rv);
    temp[rv] = 0;

    rv = write(1, temp, strlen(temp));
    check_rv(rv);

    return 0;
}
#+END_SRC

* wait
- wait :: waits for any child process
- waitpid :: waits for specific id child process
