#+TITLE: passwords

* Hash function
- Goal :: make a short representative label for a long message
- CRHF :: Collision-Resistant Hash Function
  - md4 - 128 bit
  - md5 - 128 bit
  - sha1 - 160 bit
  - sha256 - 256 bit
    - Considered indistinguishable from a "random oracle"
  - sha3 - multiple numbers of bits accepted
- Collisions should be hard to find
- Collisions should be rare

* Recap:
- Perfect Security (Encryption) / Shannon security
- One-time pad construction
- Security flaws (key too long)
- Computational difficulty / indistinguishability
- PRGs, Blum-Micali, AES
- PRFs
- Symmetric key encryption, MACs
- Public key crypto: IND-CPA encryption, El Gamal, RSA
- Digital signatures & hash functions


* Authentication
- The process of verifying some actor's identity
- Permissions, capabilities, and access control are all contingent upon knowing
  the identity of the actor
- Paramterized as a username and a secret
  - Secret limits unauthorized access
- Secrets should be unforgeable, unguessable, and revokable

* Passwords
- Main Problem - must be "human" usable
** Natural Authenticators - classes of passwords
- Something you know :: password
- Something you have :: RFID card, key, etc.
- Unique property of you :: biometrics

* History of passwords
- System must validate passwords provided by users
- Passwords must be stored somewhere
- Stored in plaintext
** Possible attacks:
*** Online brute force attacks
**** Countermeasures:
- Limited guesses
- Password hygiene
- 2-factor authentication
*** Password file theft
**** Countermeasures:
- Don't store passwords in plain text
- Store hash of passwords

 
* Hashed passwords
- Username stored alongside hashed passwords
** Possible attacks
- Offline brute force attacks:
  - Dictionary attacks :: make dictionary of common passwords and words and their
    hashes, compare with list of breached password hashes
- Online brute force attacks:
  - Online password guessing :: guess passwords on website
** Countermeasures:
- Salt passwords in addition to hashing


* Brute force attack estimates
- a-z, A-Z, 0-9, ~33 symbols -> 95 characters
- Assume 8 characters long
- 95^8 possible passwords -> 6,000 Terabytes
- Dictionary attack on all passwords
- |Dictionary| = 6,000 Terabytes * 16 bytes = 100,000 Terabytes
- $20 per terabyte = 2M to store all passwords


* Time-memory tradeoff
The more you store, the less computation you have to do
- Hash chain :: repeatedly hash passwords and store initial password and final hash
- Build hash chain covering some percentage of password space
- How to invert hash:
  - Continue to hash h some number of times equal to the length of your hash chain, and check each password to see if it matches end hash
  - If it does, you can recover the password
- Called Rainbow Tables
- Can break up to 10 character passwords in about a day on a standard computer


* Salted passwords
- Makes Rainbow Table attacks ineffective
- Salt unique to each user
- Stored in plaintext
- Store hash(password + salt)
- Password dictionaries can't check collisions, because hashes are unique when the salt is added, protecting from users with bad passwords
** Possible attacks:
- GPUs can hash a lot of passwords very fast (all 6-character passwords in 15 minutes)
** Countermeasures:
- Very slow hash functions (better than iterated)
- Iterated hash function


* Best practices so far:
- Hash passwords
- Salt the hash
- Use slow crypto, e.g. bcrypt


* Why is bcrypt slow?
- Parameterized by amount of storage needed to compute
- Generates a large table of values (larger than CPU cache)
- CPU forced to offload it to RAM, which is much slower


* Dealing with breaches
- Breach of security considered inevitable
- Honeywords :: fake passwords stored alongside real passwords
  - Use honey server to store index (which number password is real)
  - If someone logs in using one of the fake passwords, we know our system has been breached
  - Generate fake passwords using password dictionaries to make them look real


* Password recovery / reset
- Problem: hashed passwords can not be recovered
** Cracking password reset:
*** Knowledge-based authentication
Easy to find this information
- Mother's maiden name
- Prior street address
*** 2-factor authentication
- Gain control of authentication device

* Choosing passwords
** Password classes:
- 1c8 :: 1 character class and 8 characters minimum
- 4c8 :: 4 character classes and 8 characters minimum

* SMS Two Factor Authentication
- Relies on your phone number as the second factor
- Key assumption: only yor phone should receive SMS sent to your number
** Attacks:
- Social engineering the phone company
  - Pretend to be the victim and say you got a new SIM

* Universal 2-factor key
- Hardware device for 2-factor authentication
- Uses assymetric key encryption
- When creating account, website associates public key with username
- When logging in, sign a challenge with your private key
- Also protects against man-in-the-middle attacks by signing including the URL

* Abhi's phone number: (434) - 535 - 2244

* Homework tips
- Euler problem
  - 12 not in Z* so Euler's identity doesn't apply
  - 400 mod 6 = 4
  - 3^400 = 45
  - 4^400 = 34
  - 12^400
- PCSK z^sk modn
- pk * sk = 1 mod n
- (m^pk)^sk = m mod n

* Password Security Game
- Many different machines to log into
- Password for each machine would be unusable
- Same password everywhere is a security problem

* Distributed authentication
- 1 server stores password for entire system
- Individual hosts need method to verify passwords
** Bad solution:
- Computers send passwords directly to password server and receive answer of
  whether it was correct
- Attacker can attack links or pose as a relying user to steal passwords

* Needham-Schroeder Protocol
5 steps
1. Alice -> Server: (A, B, N_i)
2. Server -> Alice: (N_i, KAB, (KAB, A)_KBS)_KAS
   Message contains Alice's version of the secret key, and message for Bob
   containing his secret key_
3. Alice -> Bob: (KAB, A)_KBS
   Bob and Alice now both have secret keys, but they need to verify they are the same
4. Bob picks N_j, Bob -> Alice (N_j, A)_KAB_
5. Alice -> Bob (N_j - 1)_KAB
   They exchanged different messages to ensure that no one else could have
   copied the messages

* Single sign-on
- Log in with account from other website
- Avoid giving password to websites with security you are unsure of


* After Authentication, then what?

* Access control check
- Given an access request, return an access control decision

* Access control models
** Discretionary access control (DAC)
- Access rights propagate and may be changed at subject's discretion
- File has read/write privileges, and any user with those access rights can
  share them
- Users can pass on any priveleges they have
** Mandatory Access Control (MAC)
- Access of subjects to objects is based on a system-wide policy
- Users don't have full control over resources they create

* Methods of Access Control
** Access control matrices
- Read, write, excute permissions for every user for every object
- Difficult to control
- Too much to keep track of
** Unix-style permissions
- All objects have an owner and a group
- Permissions separated into owner, group, and everyone else
- Use chmod to edit permissions
- chmod +x :: makes a file executable
- chmod 777 :: 7 in binary is 111, setting read, write and execute each
  to 1; each 7 represents the permissions of the owner, the group, and everyone else
Who can change permissions?
- Only owner can change permissions and group
- Can only add a group you belong to
- Root can change permissions for any file


* Midterm Review:
- Security game for symmetric encryption
- Security game for Public Key Encryption
- Distributed password authentication
