#+TITLE: passwords

* Hash function
** Goal :: make a short representative label for a long message
** CRHF :: Collision-Resistant Hash Function
- md4 :: 128 bit
- md5 :: 128 bit
- sha1 :: 160 bit
- sha256 :: 256 bit
 - Considered indistinguishable from a "random oracle"
- sha3
*** Collisions should be hard to find
*** Collisions should be rare

* Recap:
** Perfect Security (Encryption) / Shannon security
**
**

* Authentication :: the process of verifying some actor's identity
**
* Passwords
** Main Problem :: must be "human" usable
** Natural Authenticators - classes of passwords
- Something you know" :: password
- Something you have :: RFID card, key, etc.
- Unique property of you :: biometrics

* History of passwords
** System must validate passwords provided by users
** Passwords must be stored somewhere
** Stored in plaintext
** Possible attacks:
*** Online brute force attacks
**** Countermeasures:
- Limited guesses
- Password hygiene
- 2-factor authentication
*** Password file theft
**** Countermeasures:
- Don't store passwords in plain text
- Store hash of passwords
  
* Hashed passwords
** Username stored alongside hashed passwords
** Possible attacks
*** Offline brute force attacks
- Dictionary attacks :: make dictionary of common passwords and words and their
  hashes, compare with list of breached password hashes
- Online password guessing :: guess passwords on website
*** Countermeasures:
**** Salt passwords in addition to hashing

* Brute force attack estimates
** a-z, A-Z, 0-9, ~33 symbols -> 95 characters
** Assume 8 characters long
** 95^8 possible passwords -> 6,000 Terabytes
** Dictionary attack on all passwords
** |Dictionary| = 6,000 Terabytes * 16 bytes = 100,000 Terabytes
** $20 per terabyte = 2M to store all passwords

* Time-memory tradeoff
** The more you store, the less computation you have to do
** Hash chain :: repeatedly hash passwords and store initial password and final hash
** Build hash chain covering some percentage of password space
** How to invert hash:
*** Continue to hash h some number of times equal to the length of your hash chain, and check each password to see if it matches end hash
*** If it does, you can recover the password
** Called Rainbow Tables
** Can break up to 10 character passwords in about a day on a standard computer

* Salted passwords
** Makes Rainbow Table attacks ineffective
** Salt unique to each user
** Stored in plaintext
** Store hash(password + salt)
** Password dictionaries can't check collisions, because hashes are unique when the salt is added, protecting from users with bad passwords
** Possible attacks:
*** GPUs can hash a lot of passwords very fast (all 6-character passwords in 15 minutes)
*** Countermeasures:
**** Very slow hash functions (better than iterated)
**** Iterated hash function
* Best practices so far:
** Hash passwords
** Salt the hash
** Use slow crypto, e.g. bcrypt

* Why is bcrypt slow?
** Parameterized by amount of storage needed to compute
** Generates a large table of values (larger than CPU cache)
** CPU forced to offload it to RAM, which is much slower

* Dealing with breaches
** Breach of security considered inevitable
** Honeywords :: fake passwords stored alongside real passwords
*** Use honey server to store index (which number password is real)
*** If someone logs in using one of the fake passwords, we know our system has been breached
*** Generate fake passwords using password dictionaries to make them look real

* Password recovery / reset
** Problem: hashed passwords can not be recovered
** Cracking password reset:
*** Typical implementations use knowledge-based authentication
- Mother's maiden name
- Prior street address
**** Easy to find this information
*** 2-factor authentication

* Choosing passwords
** Password classes:
- 1c8 :: 1 character class and 8 characters minimum
- 4c8 :: 4 character classes and 8 characters minimum
